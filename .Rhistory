install.packages("ggplot2")
install.packages("mysqld")
install.packages("mysqlr")
install.packages("mysql")
??sql
??mysql
??mysqlr
??mysqld
??rmysql
??rsql
??sqldf
install.packages("sqldf")
install.packages("RMySQL")
getwd()
setwd("Documents/Coursera")
setwd("Developing Data Products")
setwd("Wrrk 3")
setwd("Week 3")
setwd("shiny")
runApp()
import shiny
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ctrl <- trainControl(method="cv")
modFit <- train(diagnosis ~ ., data=training, method="rf", trControl=ctrl, number=3)
inTrain = createDataPartition(adData$diagnosis, p = 0.01)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ctrl <- trainControl(method="cv")
modFit <- train(diagnosis ~ ., data=training, method="rf", trControl=ctrl, number=3)
inTrain = createDataPartition(adData$diagnosis, p = 0.1)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ctrl <- trainControl(method="cv")
modFit <- train(diagnosis ~ ., data=training, method="rf", trControl=ctrl, number=3)
testPred <- predict(modFit, newdata=testing)
acc <- confusionMatrix(testPred, testing$diagnosis)$overall['Accuracy']
plot(confusionMatrix(testPred, testing$diagnosis)
)
plot(confusionMatrix(testPred, testing$diagnosis))
Confusion<-(confusionMatrix(testPred, testing$diagnosis))
ctable <- as.table(matrix(c(Confusion$nnet$table), nrow = 2, byrow = TRUE))
Confusion$nnet
ctable <- as.table(matrix(c(Confusion$table), nrow = 2, byrow = TRUE))
fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
ffp<-fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
plot(ffp)
runApp()
output$ffp<-fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fourfoldplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?AlzheimerDisease
??AlzheimerDisease
?data
runApp()
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kj6aqr',
token='703E1C585FFF4CF5C2F850CF90086565',
secret='<SECRET>')
shinyapps::setAccountInfo(name='kj6aqr', token='703E1C585FFF4CF5C2F850CF90086565', secret='9YUj4w3h7Ufj7CeEfSE7SXqd3GjDlWOngsdGl975')
library(shinyapps)
deployApp('.')
deployApp('.')
runApp()
deployApp('.')
deployApp('.')
library(UsingR)
library(caret)
library(gbm)
library(AppliedPredictiveModeling)
library(scales)
library(e1071)
library(randomForest)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 0.2)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ctrl <- trainControl(method="cv")
modFit <- train(diagnosis ~ ., data=training, method="lda", trControl=ctrl)
testPred <- predict(modFit, newdata=testing)
confusionMatrix(testPred, testing$diagnosis)
ctable <- as.table(matrix(c(selModel()$table), nrow = 2, byrow = TRUE))
fourfoldplot(ctable, color = c("#CC6666", "#99CC99"), conf.level = 0, margin = 1, main = "Confusion Matrix")
View(testing)
View(testing)
install_github('slidify','ramnathv')
library(devtools)
library(slidify)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
getwd()
setwd(../pres)
setwd("../pres")
author("alzheimer")
--- .class #id
---
s
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install_github("slidifyLibraries", "ramnathv", "dev")
install_github("slidify", "ramnathv", "dev")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
slidify("index.Rmd")
nstall_version("stringr", version="0.6.2")
install_version("stringr", version="0.6.2")
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
devtools:session_info()
devtools::session_info()
slidify("index.Rmd")
